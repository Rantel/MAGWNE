<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
 * Screen configs.
 */
window_set_fullscreen(true);

// How big is that screen?
var screen_width = display_get_width();
var screen_height = display_get_height();

// How much of the room do we want on-screen?
view_wview = screen_width;
view_hview = screen_height;

// How much of our screen to we want that to take up?
view_wport = screen_width;
view_hport = screen_height;

surface_resize(application_surface, view_wport[0],view_hport[0]);

/*
 * Enemy Spawning
 */
seconds_between_enemy_spawns = 0.5;
seconds_since_last_enemy_spawn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Quit key
if (keyboard_check_pressed(vk_escape)) {
    game_end();
}

if (keyboard_check_pressed(ord('R'))) {
    game_restart();
}

/*
 * Enemy spawning
 */
seconds_since_last_enemy_spawn += 1 / room_speed;
if (seconds_since_last_enemy_spawn &gt;= seconds_between_enemy_spawns) {
    var spawn_x = 0;
    var spawn_y = 0;
    if (choose(true, false)) {
        spawn_x = choose(1, room_width-1);
        spawn_y = random(room_height);
    } else {
        spawn_y = choose(1, room_width-1);
        spawn_x = random(room_width);
    }
    seconds_since_last_enemy_spawn = 0;
    //spawn enemy
    instance_create(spawn_x, spawn_y, choose(obj_shrinking_enemy, obj_exploding_enemy, obj_slowing_enemy));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
