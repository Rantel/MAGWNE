<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_fragment</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reassembling = false;
in_position = true;

starting_x = x;
starting_y = y;

acceleration_while_exploding = 300 // pixels per second per second
acceleration_while_reforming = 600 // pixels per second per second


number_of_fragments_reassembled = 0;

direction = random(360);
image_angle = direction;
speed = 600 / room_speed;
speed *= random_range(0.5, 1.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!reassembling) {
   if (speed &gt; 0)  {
      speed = speed - (acceleration_while_exploding / (room_speed * room_speed));
      } else {
      reassembling = true;
      speed = 0;
      direction = (direction + 180) % 360;
      }
} else {
   speed += (acceleration_while_reforming / (room_speed * room_speed));
   if (point_distance(x, y, starting_x, starting_y) &lt; speed) {
      speed = 0;
      x = starting_x;
      y = starting_y;
      if (in_position) {
         obj_player_fragment.number_of_fragments_reassembled++;
         in_position = !in_position;
      }
      if (obj_player_fragment.number_of_fragments_reassembled &gt;= instance_number(obj_player_fragment)) {
           obj_player_fragment.number_of_fragments_reassembled = 0;
           instance_create(x, y, obj_player);
           with (obj_player_fragment) instance_destroy();  
      }                
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
